# -*- coding: utf-8 -*-
"""Projeto_Imobiliario

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jnrlv6VnthhIZkgoJ7mJe_we8Smgj9vi

# carregando dataset
"""

import pandas as pd

url = 'https://raw.githubusercontent.com/alura-cursos/pandas-conhecendo-a-biblioteca/main/base-de-dados/aluguel.csv'
pd.read_csv(url)

pd.read_csv(url, sep=';')

"""#Caracteristicas da Base"""

dados = pd.read_csv(url, sep=';')
corpo_dados = dados.shape
linhas, colunas = corpo_dados
print(f'O data frame possui {linhas} linhas  e {colunas} colunas')
colunas = dados.columns
colunas
dados.info() # p/ verificar o tipo de dado de cada coluna

dados['Tipo']

dados[['Quartos', 'Valor']] # int sao dados inteiros e float dados decimais

"""#Analise Exploratoria"""

dados.head()

dados['Valor'].mean()

dados.groupby('Tipo').mean(numeric_only=True)

dados.groupby('Tipo')[['Valor']].mean().sort_values('Valor').round(2)

df_Preco_tipo = dados.groupby('Tipo')[['Valor']].mean().sort_values('Valor').round(2)
df_Preco_tipo.plot(kind='barh', figsize=(14, 10), color = 'purple')

"""Imoveis Residenciais"""

#metodo unique
dados.Tipo.unique()

imoveis_comerciais = ['Conjunto Comercial/Sala',
                      'Prédio Inteiro', 'Loja/Salão',
                      'Galpão/Depósito/Armazém',
                      'Casa Comercial', 'Terreno Padrão',
                      'Loja Shopping/ Ct Comercial',
                      'Box/Garagem', 'Chácara',
                      'Loteamento/Condomínio', 'Sítio',
                      'Pousada/Chalé', 'Hotel', 'Indústria']

dados.query('@imoveis_comerciais in Tipo') # mostra os imoveis comerciais

df = dados.query('@imoveis_comerciais not in Tipo')
df.Tipo.unique()

df_Preco_tipo = df.groupby('Tipo')[['Valor']].mean().sort_values('Valor').round(2)
df_Preco_tipo.plot(kind='barh', figsize=(14, 10), color = 'purple')

"""# Percentual de cada tipo de Imovel"""

df.Tipo.unique()

df.Tipo.value_counts(normalize=True) # metodo value_counts

df.Tipo.value_counts(normalize=True).to_frame# metodo to_frame p/ passar uma serie p/ dataframe

df_percentual_tipo = df.Tipo.value_counts(normalize=True).to_frame()
df_percentual_tipo.plot(kind='bar', figsize=(8, 6), color = 'green',
xlabel='Tipos', ylabel='Percentual'                        )

df.query('Tipo == "Apartamento"')
dados_apartamento = df.query('Tipo == "Apartamento"')
dados_apartamento.head()
dados_apartamento.Quartos.mean()
df
df.Bairro.value_counts()
dados.groupby('Bairro')[['Valor']].mean().sort_values('Valor').round(2).tail(5)
dados.groupby('Bairro')[['Valor']].mean().sort_values('Valor').round(2).tail(5).plot(kind='barh', figsize=(12, 6), color = 'purple')

# Salvando o DataFrame em uma variável
df_exemplo = df['Tipo'].value_counts(normalize=True).to_frame().sort_values('Tipo')

# Alterando o nome da coluna "Proportion" para "Percentuais"
df_exemplo.rename(columns={'proportion': 'Percentuais'}, inplace=True)

# Visualizando o DataFrame
df_exemplo

"""# Tratando dados nulos"""

dados.isnull()# verifica se o dado existente é nulo
dados.isnull().sum() # soma quantos dados sao nulos

dados.fillna(0) # substitui todos os valores nulos por 0

dados = dados.fillna(0) # substitui todos os valores nulos por 0
dados.isnull().sum()

"""# Remover registros inconsistentes da base"""

dados.query('Valor == 0 or IPTU == 0')
dados_incosistentes = dados.query('Valor == 0 or IPTU == 0').index
dados.drop(dados_incosistentes, axis=0, inplace=True)

dados.query('Valor == 0 or IPTU == 0')

"""# metodo filtro"""

dados['Quartos'] == 1

selecao1 = dados['Quartos'] == 1
selecao2 = dados['Valor'] < 1200

dados_filtro1 = dados[selecao1 & selecao2] # apartamentos com quartos e exatamente 1 quarto e valor de aluguel menor doq 1200
dados_filtro1

selecao = (dados['Quartos'] > 1) & (dados['Valor'] < 3000) & (dados['Area'] > 70)
dados_filtro2 = dados[selecao] # aplica os filtros que fiz em cima
dados[selecao]
df_2 = dados[selecao]

"""# Salvando Dados"""

dados.to_csv('dados_apartamentos.csv', index=False)

pd.read_csv('dados_apartamentos.csv')

dados.to_csv('dados_apartamentos.csv', index=False, sep=';')

pd.read_csv('dados_apartamentos.csv', sep=';')

"""#Salvando dados_filtro1"""

dados_filtro1

dados_filtro1.to_csv('dados_filtro1.csv', index=False, sep=';')
pd.read_csv('dados_filtro1.csv', sep=';')



"""#dados_filtros 2

"""

dados_filtro2 = dados[selecao]
dados_filtro2
dados_filtro2.to_csv('dados_filtragem_2.csv', index= False, sep=';')
pd.read_csv('dados_filtragem_2.csv',sep=';')

"""# criando colunas numericas"""

url = 'https://raw.githubusercontent.com/alura-cursos/pandas-conhecendo-a-biblioteca/main/base-de-dados/aluguel.csv'
dados = pd.read_csv(url, sep=';')
dados['Valor por mes'] = dados['Valor'] + dados['Condominio']
dados.head()

dados['valor_por_ano'] = dados['IPTU'] + dados['Valor por mes'] * 12
dados.head()

"""#colunas categoricas"""

dados['Descricao'] = dados['Tipo'] + ' | ' + dados['Bairro']
dados.head()

dados['Descricao'] = dados['Tipo'] + ' | ' + dados['Bairro'] + ' Com ' \
 + dados['Quartos'].astype(str) + ' Quarto(s)' + \
 ' e ' + dados['Vagas'].astype(str) + ' vaga(s) de garagem'
dados.head()

"""#colunas binarias"""

dados.head()